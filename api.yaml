openapi: 3.0.0
# Gunak Platform API
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/samanvay/gunak/1.0.0
  - description: Production server (live data)
    url: https://gunak.nhsrcindia.org/api
info:
  description: This is API documentation for Gunak Platform. Sample client codes can be generated from [here](https://documenter.getpostman.com/view/695405/S1EUubE9).
  version: "1.0.0"
  title: Gunak Platform
  # termsOfService: 'http://swagger.io/terms/'
  contact:
    email: petmongrels@gmail.com
  license:
    name: AGPL 3.0
    url: 'https://opensource.org/licenses/AGPL-3.0'
tags:
  - name: Login
    description: Before accessing the API to get the assessment data the api should login. Gunak uses cookie based session management.
  - name: AssessmentTool
    description: For doing the assessment an assessment tool is used. A program can have one or more assessment tools. An example is - Program = 'Laqshya', Assessment tool = 'NQAS', 'Laqshya Monthly', 'Laqshya Baseline'. Assessment tool consists of one or more checklists or set of indicators depending on the type of assessment tool (COMPLIANCE or INDICATOR). Using the same example - NQAS, which is of type COMPLIANCE, has 'OT' and 'Labour Room' checklists.
  - name: Assessment
    description: There are three key aspects of an assessment for an API user - Facility, Assessment Tool and Assessment Instance. An assessment is done for a facility. For doing the assessment an assessment tool is used. A single instance of assessment could be divided among more than one assessor. For example - one assessor could do 'OT' and other one could do 'Labour Room'. When the assessors use single series name from the app, Gunak collects them into a single assessment.
paths:
  /login:
    post:
      tags:
        - Login
      summary: Some of API methods may be protected, hence the caller must login before calling those APIs.
      description: Post the login details to the server to obtain a valid cookie by name JSESSIONID. Include this cookie in other API calls that are protected.
      responses:
        '200':
          description: Successful login
        '401':
          description: Login failed, email and password combination incorrect
        'default':
          $ref: '#/components/responses/APIError'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
  /ext/assessmentType:
    get:
      tags:
        - Assessment Type
      summary: Get a list of assessment types.
      description: Get a list of assessment types updated after a given date. Each assessment type has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all assessment type updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssessmentType'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/program:
    get:
      tags:
        - Program
      summary: Get a list of programs.
      description: Get a list of programs updated after a given date. Each program has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all programs updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Program'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/assessmentTool:
    get:
      tags:
        - AssessmentTool
      summary: Get a list of assessment tools.
      description: Get a list of assessment tools updated after a given date. Each Assessment tool has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all assessment tools updated after that time (excluding the exact match). To get universal assessment tools do not pass the stateName.
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssessmentTool'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/checklist:
    get:
      tags:
        - Checklist
      summary: Get a list of checklists.
      description: Get a list of checklists updated after a given date. Each checklist has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all checklists updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Checklist'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/areaOfConcern:
    get:
      tags:
        - Area of concern
      summary: Get a list of area of concerns.
      description: Get a list of area of concerns updated after a given date. Each area of concerns has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all area of concerns updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AreaOfConcern'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/standard:
    get:
      tags:
        - Standard
      summary: Get a list of standards.
      description: Get a list of standards updated after a given date. Each standard has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all standards updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Standard'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/measurableElement:
    get:
      tags:
        - Measurable Element
      summary: Get a list of measurable elements.
      description: Get a list of measurable elements updated after a given date. Each measurable element has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all measurable elements updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/MeasurableElement'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/checkpoint:
    get:
      tags:
        - Checkpoint
      summary: Get a list of checkpoints.
      description: Get a list of checkpoints updated after a given date. Each checkpoint has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all checkpoints updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Checkpoint'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/indicatorDefinition:
    get:
      tags:
        - Indicator Definition
      summary: Get a list of indicator definitions.
      description: Get a list of indicator definitions updated after a given date. Each indicator definition has a last modified date on which it was last changed. Depending on the date-time value passed the API will return a list of all indicator definitions updated after that time (excluding the exact match).
      parameters:
        - name: fromDate
          in: query
          description: Timestamp (date and time) value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/IndicatorDefinition'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/assessmentSummary:
    get:
      tags:
        - Assessment
      security:
        - cookieAuth: []
      summary: Get facility assessments after the given date-time.
      description: Get a list of facility assessments completed after a date. Each Assessment has an assessment date on which it was submitted to the system. Depending on the date-time value passed the API will return a paged list of all assessments submitted after that time (excluding the exact match). You can change the page number to access subsequent pages of response or (not and) you can provide the assessmentEndDateTime as the last summary resource's assessmentEndDateTime value.
      parameters:
        - name: assessmentEndDateTime
          in: query
          description: Timestamp (date and time) value. The assessments returned will be all have assessmentEndDateTime on or after this value. The datetime value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. "2000-10-31T01:30:00.000Z".
          required: true
          schema:
            type: string
            format: date-time
        - name: assessmentTool
          in: query
          description: System id of the assessment tool
          required: true
          schema:
            type: string
        - name: assessmentType
          in: query
          description: System id of assessment type (use this to filter assessments)
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PageDetails'
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssessmentSummary'
        'default':
          $ref: '#/components/responses/APIError'
  /ext/assessment/{systemId}:
    get:
      tags:
        - Assessment
      security:
        - cookieAuth: []
      summary: Get all checkpoint scores or indicators of an assessment (depending on the setup of the assessment tool)
      description: Each assessment has a globally unique systemId which identifies an assessment. This systemId can be retrieved from the assessment listing api call. While example displays both checklists and indicators within the same assessment, in reality the assessment tools are not setup like that.
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            type: string
            format: string
            example: 'bf29ff04-774b-4f38-bc20-ed98de4d8918'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        default:
          $ref: '#/components/responses/APIError'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  parameters:
    pageParam:
      name: page
      in: query
      required: false
      description: Page number, starts with 0 which can be incremented to get subsequent page numbers. Please also see the response fields about page number of the response and total number or pages available.
      schema:
        type: integer
        default: 0
    pageSizeParam:
      name: size
      in: query
      required: false
      description: Number of resources to include in a page
      schema:
        type: integer
        default: 25
  responses:
    APIError:
      description: Gunak uses standard <a href="https://www.restapitutorial.com/httpstatuscodes.html" target="_blank">HTTP Status Codes</a> for communicating about various error codes. In the API error response please check the status code. Apart from the standard error, API error contains application specific error messages as well.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
  schemas:
    APIError:
      type: object
      properties:
        httpStatusCode:
          type: integer
          example: 405
          description: For reference - <a href="https://www.restapitutorial.com/httpstatuscodes.html" target="_blank">HTTP Status Codes</a>
        errorMessage:
          type: string
          description: Detailed error message which provides further details. In case of Internal Server Error (500), please report the error to support.
    PageDetails:
      type: object
      description: Used when the number of resources in the response is large and cannot be sent in one response to the called. In such a case the results are returned in multiple pages. Along with the resources, PageDetails is part of response providing information to the user to navigate through all the pages to fetch all the resources. For the example - Assume there are 89 resources. Each page size is of 20 resources. Total number of pages = 89/20 = 5 (rounded up). Currently in page number 2 (0 based).
      properties:
        totalPages:
          type: integer
          description: Total number of pages of response
          example: 5
        last:
          type: boolean
          description: Is this the last page?
          example: false
        totalElements:
          type: integer
          description: Total number of resources in all the pages put together
          example: 89
        size:
          type: integer
          description: Maximum number of elements in a page
          example: 20
        number:
          type: integer
          description: The current page number (starts from 0, upto totalPages - 1)
          example: 2
        numberOfElements:
          type: integer
          description: Number of elements in the current page
          example: 20
    AssessmentSummary:
      type: object
      properties:
        systemId:
          type: string
          example: '93885199-c27b-4c56-97f8-11717548a863'
        program:
          type: string
          example: 'bfb263a8-a2f4-4793-bb4f-f6819352f2db'
        assessmentTool:
          type: string
          example: 'd91d760c-f93f-4e46-be62-bb27d64415ab'
        assessmentType:
          type: string
          example: 'd91d760c-f93f-4e46-be62-bb27d64415ab'
        assessmentSeries:
          type: string
          example: '20190210'
        assessmentStartDate:
          type: string
          format: date-time
          example: '2019-03-18T06:38:03.292Z'
        assessmentEndDate:
          type: string
          format: date-time
          example: '2019-03-18T10:38:03.292Z'
        state:
          type: string
          example: 'Chhattisgarh'
        district:
          type: string
          example: 'Bilaspur'
        facility:
          type: string
          example: 'Bilaspur DH'
        facilityType:
          type: string
          enum:
            - 100-500 Bedded Hospital
            - <100 Bedded Hospital
            - ">500 Bedded Hospital"
            - Ayush Dispensaries
            - Civil Hospital/General Hospital
            - Community Health Center
            - Dispensaries
            - District Hospital
            - H & W C
            - Health and Wellness Centre
            - M&CW Center
            - Maternity Home
            - Medical Colleges Hospital
            - Others
            - Primary Health Centre
            - Referral Hospital
            - Sub-District Hospital
            - SubCentre
            - Urban Health Centre
            - Urban Health Posts
            - Women Hospital
        facilityNIN:
          type: string
          example: 1111128383
        assessmentNumber:
          type: string
        inactive:
          type: boolean
    AssessmentType:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        program:
          type: string
          example: '3c331adb-7392-4f2f-8c57-c7ef1408fa69'
    Program:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
    AssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        program:
          type: string
          example: 'ce6b29a0-d781-4ad0-961f-2486e8cca156'
        overridingAssessmentTool:
          type: string
          description: 'When state specific assessment tools override the Universal assessment tools then this field specifies the system id of the universal assessment tool. If no universal assessment tools are overridden then this field is null'
          example: 'c042adf2-69f3-47fb-8d1d-8a822a9563b9'
        assessmentToolType:
          type: string
          enum:
            - 'COMPLIANCE'
            - 'INDICATOR'
          example: 'COMPLIANCE'
        state:
          type: string
          example: 'Chhattisgarh'
    Checklist:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        areaOfConcerns:
          type: array
          example: ['fffc1b91-df7a-403a-a64d-08b4281bc3d7', 'b8dc4122-14dd-48ec-9ec8-1345543c1455']
          description: 'So far a checklist contains all the areas of concern in an assessment tool, but the system has flexibility for cases where this may not be the case. This field can be ignored.'
        assessmentTool:
          type: string
          example: 'c042adf2-69f3-47fb-8d1d-8a822a9563b9'
    AreaOfConcern:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      properties:
        checklists:
          type: array
          example: ['fffc1b91-df7a-403a-a64d-08b4281bc3d7', 'b8dc4122-14dd-48ec-9ec8-1345543c1455']
          description: 'So far a checklist contains all the areas of concern in an assessment tool, but the system has flexibility for cases where this may not be the case. This field can be ignored.'
    Standard:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      properties:
        areaOfConcern:
          type: string
          description: 'System id of the area of concern to which this standard belongs to'
          example: 'fffc1b91-df7a-403a-a64d-08b4281bc3d7'
    MeasurableElement:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      properties:
        standard:
          type: string
          description: 'System id of the standard to which this measurable element belongs to'
          example: '35bb4f4e-73e3-482c-9d15-c98949382c2d'
    Checkpoint:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        meansOfVerification:
          type: string
        byObservation:
          type: boolean
        byStaffInterview:
          type: boolean
        byPatientInterview:
          type: boolean
        byRecordReview:
          type: boolean
        sortOrder:
          type: number
          description: 'Provides the (ascending) order in which the checkpoints are arranged within a measurable element'
          example: 1
        measurableElement:
          type: string
          description: 'System id of the measurable element to which this checkpoint belongs to'
          example: '81d1b92b-b0e3-46d9-bfb4-e9a0fa1ac998'
    IndicatorDefinition:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        description:
          type: string
        dataType:
          type: string
          enum:
            - Numeric
            - Percentage
            - Date
            - Month
            - Coded
        codedValues:
          type: string
          description: when the data type is Coded
          example: [ "Yes", "No", "In Progress" ]
        assessmentTool:
          description: 'System id of the assessment tool to which this indicator definition belongs to'
        sortOrder:
          type: number
          description: 'Provides the (ascending) order in which the indicator definitions are arranged within a assessment tool'
          example: 100
    CheckpointAssessment:
      type: object
      description: Checkpoint is the small unit of assessment in an assessment tool. A checkpoint is scored as 0, 1 or 2. A checkpoint can also be marked as not-applicable by the assessor during the assessment and in that case the score is not provided. Checkpoints do not have a reference id like measurable element, standard or area of concern.
      properties:
        checkpoint:
          type: string
          example: 'There is no unauthorised occupation within the facility, nor there is encroachment on Hospital land'
        score:
          type: integer
          enum:
            - 0
            - 1
            - 2
          example: 1
        markedNotApplicable:
          type: boolean
        remarks:
          type: string
          example: There is a part of land under litigation.
    MeasurableElementAssessment:
      type: object
      description: In an assessment tool, measurable element consists of checkpoints. Correspondingly, in an assessment, the measurable element consists of checkpoint scores.
      properties:
        reference:
          type: string
          example: 'A3.5'
        checkpointAssessments:
          type: array
          items:
            $ref: '#/components/schemas/CheckpointAssessment'
        numberOfCheckpoints:
          type: integer
          description: Total number of checkpoints scored in this measurable element, with its standard, within its area of concern, within its checklist
          example: '3'
    StandardAssessment:
      type: object
      description: In an assessment tool, standard consists of measurable elements. Correspondingly, in an assessment, their scores are grouped within a measurable element.
      properties:
        reference:
          type: string
          example: 'A3'
        measurableElements:
          type: array
          items:
            $ref: '#/components/schemas/MeasurableElementAssessment'
        numberOfMeasurableElements:
          type: integer
          description: Total number of measurable elements scored in this standard within this area of concern for this checklist
          example: '9'
    AreaOfConcernAssessment:
      type: object
      description: In an assessment tool, area of concern consists of standards. Correspondingly, in an assessment, their scores are grouped within a standards.
      properties:
        reference:
          type: string
          example: 'A'
        standards:
          type: array
          items:
            $ref: '#/components/schemas/StandardAssessment'
        numberOfStandards:
          type: integer
          description: Total number of standards scored in this area of concern within this checklist
          example: '30'
    AreaOfConcernScore:
      type: object
      description: Scores of assessment aggregated to area of concerns and standards within them.
      properties:
        reference:
          type: string
          example: 'A'
        score:
          type: integer
          example: 75
        standardScores:
          $ref: '#/components/schemas/StandardScore'
    StandardScore:
      type: object
      description: Scores of assessment aggregated to standards.
      additionalProperties:
        type: integer
      example:
        A1: 50
        A2: 54
    ChecklistAssessment:
      type: object
      description: In an assessment tool, checklist consists of area of concerns. Correspondingly, in an assessment, their scores are grouped within an area of concerns - if the assessment tool is compliance type (the other type is indicators, but both cannot exist together, given the design of assessment tools).
      properties:
        name:
          type: string
          example: 'Labour Room'
        areaOfConcerns:
          type: array
          items:
            $ref: '#/components/schemas/AreaOfConcernAssessment'
        score:
          type: number
          example: 65.5
        numberOfAreaOfConcerns:
          type: integer
          description: Total number of area of concerns scored in this checklist
          example: '8'
        numberOfCheckpoints:
          type: integer
          description: Total number of checkpoints scored in this checklist
          example: '25'
    ChecklistAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      description: Each assessment tool of type COMPLIANCE has a list of checklist (also called department sometimes). A checklist consists of area of concerns.
      properties:
        areaOfConcerns:
          type: array
          items:
            $ref: '#/components/schemas/AreaOfConcernAssessmentTool'
    IndicatorAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      description: Each assessment tool of type INDICATOR has a list of indicators.
      properties:
        description:
          type: string
        dataType:
          type: string
          enum:
            - Numeric
            - Percentage
            - Date
            - Month
            - Coded
        codedValues:
          type: string
          description: when the data type is Coded
          example: ["Yes", "No", "In Progress"]
    AreaOfConcernAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      description: Each area of concern has a list of standards.
      properties:
        areaOfConcerns:
          type: array
          items:
            $ref: '#/components/schemas/StandardAssessmentTool'
    StandardAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      description: Each standard has a list of measurable elements.
      properties:
        measurableElements:
          type: array
          items:
            $ref: '#/components/schemas/MeasurableElementAssessmentTool'
    MeasurableElementAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolReferenceComponent'
      type: object
      description: Each measurable element has a list of checkpoints.
      properties:
        checkpoints:
          type: array
          items:
            $ref: '#/components/schemas/CheckpointAssessmentTool'
    CheckpointAssessmentTool:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      description: Checkpoints are the fields in an assessment tool which the assessors provide their score on. Also note that checkpoint doesn't have any reference unlike Area of concern, standard, and measurable element. The assessors is provided with means of verification as a help. The method of assessment can be based on one of more of observation, staff interview, patient interview, and record review.
      properties:
        meansOfVerification:
          type: string
        byObservation:
          type: boolean
        byStaffInterview:
          type: boolean
        byPatientInterview:
          type: boolean
        byRecordReview:
          type: boolean
    IndicatorAssessment:
      type: object
      description: Assessment consists of indicators, if the assessment tool is indicator type (the other type is compliance, but both cannot exist together in an assessment, given the design of assessment tools).
      properties:
        systemId:
          type: string
          example: '2678730d-ed27-48d6-9bfb-ab6688a85d10'
        indicatorDefinition:
          type: string
          example: 'ccfbbfa8-ba5b-48c2-a860-5b4fb6f86680'
          description: 'System id of the indicator definition of this indicator'
        value:
          type: string
          description: Since the indicator can have multiple data types, Gunak provides all the values as string. Based on the data type the should convert the value to appropriate data type. DataType of Month and Date are both in yyyy-MM-dd format. DataType of Percentage is a numeric value (without percentage sign).
          example: 'No'
    Assessment:
      allOf:
        - $ref: '#/components/schemas/AssessmentSummary'
      type: object
      properties:
        checklists:
          type: array
          items:
            $ref: '#/components/schemas/ChecklistAssessment'
        areaOfConcernScores:
          type: array
          items:
            $ref: '#/components/schemas/AreaOfConcernScore'
        indicators:
          type: array
          items:
            $ref: '#/components/schemas/IndicatorAssessment'
        totalNumberOfScoredCheckpoints:
          type: integer
          description: Total number of checkpoints scored across checklists in this assessment
          example: '100'
        numberOfChecklists:
          type: integer
          description: Number of checklists scored in this assessment
          example: '4'
    AssessmentToolComponent:
      type: object
      properties:
        systemId:
          type: string
          example: '60785eec-4b44-4336-8964-1d20a3bb8474'
        name:
          type: string
        inactive:
          type: boolean
          example: false
        createdDate:
          type: string
          format: date-time
          example: '2019-03-18T10:38:03.292Z'
        lastModifiedDate:
          type: string
          format: date-time
          example: '2019-03-18T10:38:03.292Z'
    AssessmentToolReferenceComponent:
      allOf:
        - $ref: '#/components/schemas/AssessmentToolComponent'
      type: object
      properties:
        reference:
          type: string
